//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ActionMaps/SkullScaling.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SkullScaling: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SkullScaling()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SkullScaling"",
    ""maps"": [
        {
            ""name"": ""Scaling"",
            ""id"": ""adcf1004-c8d0-4e6f-8b6a-9a4c4d0e9a83"",
            ""actions"": [
                {
                    ""name"": ""ScaleUp"",
                    ""type"": ""Button"",
                    ""id"": ""7d17de74-59d9-4767-b3a9-7537e1d05a4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScaleDown"",
                    ""type"": ""Button"",
                    ""id"": ""f5e15e69-daec-4788-842b-08593664bbff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45fe612f-7b7e-4a3d-961f-53866716f772"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f540873-5d20-402f-98cf-e7f73e9bebe2"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Scaling
        m_Scaling = asset.FindActionMap("Scaling", throwIfNotFound: true);
        m_Scaling_ScaleUp = m_Scaling.FindAction("ScaleUp", throwIfNotFound: true);
        m_Scaling_ScaleDown = m_Scaling.FindAction("ScaleDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Scaling
    private readonly InputActionMap m_Scaling;
    private List<IScalingActions> m_ScalingActionsCallbackInterfaces = new List<IScalingActions>();
    private readonly InputAction m_Scaling_ScaleUp;
    private readonly InputAction m_Scaling_ScaleDown;
    public struct ScalingActions
    {
        private @SkullScaling m_Wrapper;
        public ScalingActions(@SkullScaling wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScaleUp => m_Wrapper.m_Scaling_ScaleUp;
        public InputAction @ScaleDown => m_Wrapper.m_Scaling_ScaleDown;
        public InputActionMap Get() { return m_Wrapper.m_Scaling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScalingActions set) { return set.Get(); }
        public void AddCallbacks(IScalingActions instance)
        {
            if (instance == null || m_Wrapper.m_ScalingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScalingActionsCallbackInterfaces.Add(instance);
            @ScaleUp.started += instance.OnScaleUp;
            @ScaleUp.performed += instance.OnScaleUp;
            @ScaleUp.canceled += instance.OnScaleUp;
            @ScaleDown.started += instance.OnScaleDown;
            @ScaleDown.performed += instance.OnScaleDown;
            @ScaleDown.canceled += instance.OnScaleDown;
        }

        private void UnregisterCallbacks(IScalingActions instance)
        {
            @ScaleUp.started -= instance.OnScaleUp;
            @ScaleUp.performed -= instance.OnScaleUp;
            @ScaleUp.canceled -= instance.OnScaleUp;
            @ScaleDown.started -= instance.OnScaleDown;
            @ScaleDown.performed -= instance.OnScaleDown;
            @ScaleDown.canceled -= instance.OnScaleDown;
        }

        public void RemoveCallbacks(IScalingActions instance)
        {
            if (m_Wrapper.m_ScalingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScalingActions instance)
        {
            foreach (var item in m_Wrapper.m_ScalingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScalingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScalingActions @Scaling => new ScalingActions(this);
    public interface IScalingActions
    {
        void OnScaleUp(InputAction.CallbackContext context);
        void OnScaleDown(InputAction.CallbackContext context);
    }
}
